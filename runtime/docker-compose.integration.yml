version: '3'

services:
  # Genesis node that bootstraps the federation
  icn-runtime-genesis:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: icn-runtime-genesis
    volumes:
      - ./config:/etc/icn-runtime:ro
      - ./data/genesis:/var/lib/icn-runtime
      - ./logs/genesis:/var/log/icn-runtime
    ports:
      - "8080:8080"  # HTTP API
      - "4001:4001"  # libp2p/Federation
      - "8090:8090"  # WebSocket for events
      - "9090:9090"  # Metrics
    environment:
      - RUST_LOG=debug
      - ICN_CONFIG_FILE=/etc/icn-runtime/runtime-config-genesis.toml
      - ICN_LOG_FORMAT=json
      - ICN_NODE_ROLE=genesis
    networks:
      - icn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    stop_grace_period: 10s

  # Validator node 1
  icn-runtime-validator1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: icn-runtime-validator1
    volumes:
      - ./config:/etc/icn-runtime:ro
      - ./data/validator1:/var/lib/icn-runtime
      - ./logs/validator1:/var/log/icn-runtime
    ports:
      - "8081:8080"  # HTTP API
      - "4002:4001"  # libp2p/Federation
      - "8091:8090"  # WebSocket for events
      - "9091:9090"  # Metrics
    environment:
      - RUST_LOG=debug
      - ICN_CONFIG_FILE=/etc/icn-runtime/runtime-config-validator.toml
      - ICN_LOG_FORMAT=json
      - ICN_NODE_ROLE=validator
      - ICN_BOOTSTRAP_PEER=/ip4/icn-runtime-genesis/tcp/4001
    networks:
      - icn-network
    depends_on:
      icn-runtime-genesis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 15s
    stop_grace_period: 10s

  # Validator node 2
  icn-runtime-validator2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: icn-runtime-validator2
    volumes:
      - ./config:/etc/icn-runtime:ro
      - ./data/validator2:/var/lib/icn-runtime
      - ./logs/validator2:/var/log/icn-runtime
    ports:
      - "8082:8080"  # HTTP API
      - "4003:4001"  # libp2p/Federation
      - "8092:8090"  # WebSocket for events
      - "9092:9090"  # Metrics
    environment:
      - RUST_LOG=debug
      - ICN_CONFIG_FILE=/etc/icn-runtime/runtime-config-validator.toml
      - ICN_LOG_FORMAT=json
      - ICN_NODE_ROLE=validator
      - ICN_BOOTSTRAP_PEER=/ip4/icn-runtime-genesis/tcp/4001
    networks:
      - icn-network
    depends_on:
      icn-runtime-genesis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 20s
    stop_grace_period: 10s

  # Guardian node
  icn-runtime-guardian:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: icn-runtime-guardian
    volumes:
      - ./config:/etc/icn-runtime:ro
      - ./data/guardian:/var/lib/icn-runtime
      - ./logs/guardian:/var/log/icn-runtime
    ports:
      - "8083:8080"  # HTTP API
      - "4004:4001"  # libp2p/Federation
      - "8093:8090"  # WebSocket for events
      - "9093:9090"  # Metrics
    environment:
      - RUST_LOG=debug
      - ICN_CONFIG_FILE=/etc/icn-runtime/runtime-config-guardian.toml
      - ICN_LOG_FORMAT=json
      - ICN_NODE_ROLE=guardian
      - ICN_BOOTSTRAP_PEER=/ip4/icn-runtime-genesis/tcp/4001
    networks:
      - icn-network
    depends_on:
      icn-runtime-genesis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 25s
    stop_grace_period: 10s

  # Observer node
  icn-runtime-observer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: icn-runtime-observer
    volumes:
      - ./config:/etc/icn-runtime:ro
      - ./data/observer:/var/lib/icn-runtime
      - ./logs/observer:/var/log/icn-runtime
    ports:
      - "8084:8080"  # HTTP API
      - "4005:4001"  # libp2p/Federation
      - "8094:8090"  # WebSocket for events
      - "9094:9090"  # Metrics
    environment:
      - RUST_LOG=debug
      - ICN_CONFIG_FILE=/etc/icn-runtime/runtime-config-observer.toml
      - ICN_LOG_FORMAT=json
      - ICN_NODE_ROLE=observer
      - ICN_BOOTSTRAP_PEER=/ip4/icn-runtime-genesis/tcp/4001
    networks:
      - icn-network
    depends_on:
      icn-runtime-genesis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 30s
    stop_grace_period: 10s

  # AgoraNet service
  agoranet:
    image: agoranet:latest
    container_name: agoranet
    ports:
      - "3000:3000"  # AgoraNet web interface
    environment:
      - NODE_ENV=development
      - EVENT_SOURCE_URL=ws://icn-runtime-genesis:8090/events
      - API_URL=http://icn-runtime-genesis:8080/api
    networks:
      - icn-network
    depends_on:
      icn-runtime-genesis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Wallet service (mock or actual)
  wallet-agent:
    image: icn-wallet-agent:latest
    container_name: wallet-agent
    environment:
      - ICN_RUNTIME_URL=http://icn-runtime-genesis:8080
      - FEDERATION_BOOTSTRAP_PEER=/ip4/icn-runtime-genesis/tcp/4001
    ports:
      - "8000:8000"  # Wallet API
    networks:
      - icn-network
    depends_on:
      icn-runtime-genesis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Federation monitor dashboard
  federation-monitor:
    image: nginx:alpine
    container_name: federation-monitor
    volumes:
      - ./monitoring/federation-dashboard:/usr/share/nginx/html:ro
    ports:
      - "3002:80"  # Dashboard UI
    networks:
      - icn-network
    depends_on:
      - icn-runtime-genesis
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9091:9090"
    networks:
      - icn-network
    depends_on:
      - icn-runtime-genesis
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    networks:
      - icn-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  icn-network:
    driver: bridge

volumes:
  # Define named volumes for better test data management
  icn-runtime-data:
    # This can be used for persistent storage during testing
    # To reset all data between tests, omit this volume and use the mounted dir instead 